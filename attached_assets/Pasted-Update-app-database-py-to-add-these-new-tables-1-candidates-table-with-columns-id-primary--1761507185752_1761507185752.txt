Update app/database.py to add these new tables:

1. candidates table with columns:
   - id (primary key, auto-increment)
   - name (text, required)
   - email (text, unique)
   - phone (text)
   - linkedin_url (text)
   - github_url (text)
   - portfolio_url (text)
   - location (text)
   - salary_expectation_min (integer, in dollars per hour)
   - salary_expectation_max (integer, in dollars per hour)
   - hours_available (integer, default 40)
   - availability_start_date (date)
   - visa_status (text)
   - status (text, default 'new')
   - created_at (timestamp, auto-set)
   - updated_at (timestamp, auto-update)

2. candidate_artifacts table with columns:
   - id (primary key, auto-increment)
   - candidate_id (foreign key to candidates.id)
   - artifact_type (text: 'resume_pdf', 'loom_video', 'google_doc_response', 'email_thread', 'portfolio_url', 'github_url', 'code_sample', 'project_demo', etc.)
   - title (text, optional description)
   - storage_location (text, for file paths)
   - raw_text (text, extracted/pasted content)
   - raw_url (text, if it's a URL)
   - metadata (text, JSON string)
   - ai_summary (text, AI analysis)
   - ai_extracted_skills (text, JSON array)
   - ai_quality_score (float, 0-1)
   - uploaded_at (timestamp, auto-set)
   - processed_at (timestamp)

3. candidate_profiles table with columns:
   - id (primary key, auto-increment)
   - candidate_id (foreign key to candidates.id, unique)
   - technical_skills (text, JSON)
   - years_experience (float)
   - writing_quality_score (float, 0-1)
   - verbal_quality_score (float, 0-1)
   - communication_style (text)
   - portfolio_quality_score (float, 0-1)
   - code_quality_score (float, 0-1)
   - culture_signals (text, JSON)
   - personality_traits (text, JSON)
   - strengths (text)
   - concerns (text)
   - best_role_fit (text)
   - growth_potential_score (float, 0-1)
   - profile_completeness (float, 0-1)
   - last_ai_analysis (timestamp)
   - profile_version (integer, default 1)

4. jobs table with columns:
   - id (primary key, auto-increment)
   - title (text, required)
   - description (text)
   - required_skills (text, JSON array)
   - nice_to_have_skills (text, JSON array)
   - culture_requirements (text, JSON)
   - salary_min (integer)
   - salary_max (integer)
   - hours_required (integer)
   - location (text)
   - visa_sponsorship_available (boolean)
   - start_date_needed (date)
   - status (text, default 'open')
   - created_at (timestamp, auto-set)

5. matches table with columns:
   - id (primary key, auto-increment)
   - candidate_id (foreign key to candidates.id)
   - job_id (foreign key to jobs.id)
   - overall_score (float, 0-100)
   - skills_score (float, 0-100)
   - culture_score (float, 0-100)
   - communication_score (float, 0-100)
   - quality_score (float, 0-100)
   - potential_score (float, 0-100)
   - salary_compatible (boolean)
   - hours_compatible (boolean)
   - location_compatible (boolean)
   - visa_compatible (boolean)
   - availability_compatible (boolean)
   - evidence (text, JSON)
   - ai_reasoning (text)
   - created_at (timestamp, auto-set)

6. feedback table with columns:
   - id (primary key, auto-increment)
   - candidate_id (foreign key to candidates.id)
   - job_id (foreign key to jobs.id, nullable)
   - outcome (text: 'phone_screen', 'interviewed', 'offer', 'hired', 'rejected')
   - rejection_reason (text)
   - recruiter_notes (text)
   - recruiter_rating (integer, 1-5)
   - created_at (timestamp, auto-set)
   - created_by (text)

Use SQLAlchemy ORM with proper column types (String, Integer, Float, Boolean, DateTime, Text).
Create all tables when the app starts if they don't exist.
Keep any existing tables (don't break current functionality).